// ──────────────────────────────────────────────────────────────
// 1) Grab all seven radial sliders, clockwise order
// ──────────────────────────────────────────────────────────────
const radialInputs = [
  document.getElementById('slider1'),
  document.getElementById('slider2'),
  document.getElementById('slider3'),
  document.getElementById('slider4'),
  document.getElementById('slider5'),
  document.getElementById('slider6'),
  document.getElementById('slider7')
];

const customThumbs = [
  document.getElementById('thumb1'),
  document.getElementById('thumb2'),
  document.getElementById('thumb3'),
  document.getElementById('thumb4'),
  document.getElementById('thumb5'),
  document.getElementById('thumb6'),
  document.getElementById('thumb7')
];

const linearInputs = [
  document.getElementById('linear1'),
  document.getElementById('linear2'),
  document.getElementById('linear3'),
  document.getElementById('linear4'),
  document.getElementById('linear5'),
  document.getElementById('linear6'),
  document.getElementById('linear7')
];

const linearValues = [
  document.getElementById('linearValue1'),
  document.getElementById('linearValue2'),
  document.getElementById('linearValue3'),
  document.getElementById('linearValue4'),
  document.getElementById('linearValue5'),
  document.getElementById('linearValue6'),
  document.getElementById('linearValue7')
];

const polygon = document.querySelector('.radar-polygon');
const ticksGroup = document.querySelector('.ticks-group');
const radarSize = 400;
const centerX = radarSize / 2;
const centerY = radarSize / 2;
const maxRadius = 200;

const anglesRad = radialInputs.map(inp => {
  const deg = Number(inp.getAttribute('data-angle'));
  return (deg * Math.PI) / 180.0;
});

function valueToPoint(val, angleRad) {
  const fraction = (val - 1) / 9;
  const r = fraction * maxRadius;
  const x = centerX + r * Math.cos(angleRad);
  const y = centerY + r * Math.sin(angleRad);
  return [x, y];
}

function updatePolygon() {
  const pts = radialInputs.map((inp, idx) => {
    const v = parseInt(inp.value, 10);
    return valueToPoint(v, anglesRad[idx]);
  });
  const ptsStr = pts.map(p => `${p[0].toFixed(1)},${p[1].toFixed(1)}`).join(' ');
  polygon.setAttribute('points', ptsStr);
}

function onSliderInput(sliderElem) {
  const idx = radialInputs.findIndex(inp => inp.id === sliderElem.id);
  if (idx === -1) return;
  const val = Number(sliderElem.value);
  if (customThumbs[idx]) customThumbs[idx].textContent = val;
  if (linearInputs[idx]) linearInputs[idx].value = val;
  if (linearValues[idx]) linearValues[idx].textContent = val;
  updatePolygon();
  positionSliderAndThumb(idx);
  const container = sliderElem.closest('.radial-slider');
  if (container) {
    container.classList.remove('low', 'mid', 'high');
    if (val < 4) container.classList.add('low');
    else if (val < 8) container.classList.add('mid');
    else container.classList.add('high');
  }
  updateHighestScoreSummary();
}

function syncFromLinear(linearElem) {
  const idx = linearInputs.findIndex(inp => inp.id === linearElem.id);
  if (idx === -1) return;
  const val = Number(linearElem.value);
  if (radialInputs[idx]) radialInputs[idx].value = val;
  if (customThumbs[idx]) customThumbs[idx].textContent = val;
  if (linearValues[idx]) linearValues[idx].textContent = val;
  updatePolygon();
  positionSliderAndThumb(idx);
  updateHighestScoreSummary();
}

function positionSliderAndThumb(idx) {
  const inp = radialInputs[idx];
  const container = inp?.parentElement;
  const thumb = customThumbs[idx];
  if (!inp || !container || !thumb) return;
  const angleDeg = Number(inp.getAttribute('data-angle'));
  const angleRad = (angleDeg * Math.PI) / 180.0;
  container.style.position = 'absolute';
  container.style.left = '50%';
  container.style.top = '50%';
  container.style.transformOrigin = '0 50%';
  container.style.transform = `translateY(-50%) rotate(${angleDeg}deg)`;
  inp.style.width = `${maxRadius}px`;
  inp.style.transformOrigin = 'left center';
  inp.style.transform = 'translateY(-50%)';
  const [x, y] = valueToPoint(Number(inp.value), angleRad);
  thumb.style.left = `${x}px`;
  thumb.style.top = `${y}px`;
  thumb.style.transform = 'translate(-50%, -50%)';
}

function drawTicks() {
  ticksGroup.innerHTML = '';
  radialInputs.forEach((_, idx) => {
    const angleRad = anglesRad[idx];
    for (let i = 1; i <= 10; i++) {
      const [x, y] = valueToPoint(i, angleRad);
      const perpAngle = angleRad + Math.PI / 2;
      const tickLength = 6;
      const dx = (tickLength / 2) * Math.cos(perpAngle);
      const dy = (tickLength / 2) * Math.sin(perpAngle);
      const ns = 'http://www.w3.org/2000/svg';
      const line = document.createElementNS(ns, 'line');
      line.setAttribute('x1', (x - dx).toFixed(1));
      line.setAttribute('y1', (y - dy).toFixed(1));
      line.setAttribute('x2', (x + dx).toFixed(1));
      line.setAttribute('y2', (y + dy).toFixed(1));
      line.setAttribute('stroke', '#ececec');
      line.setAttribute('stroke-width', '2');
      ticksGroup.appendChild(line);
    }
  });
}

function updateHighestScoreSummary() {
  const values = radialInputs.map(inp => parseInt(inp.value, 10));
  const labels = ['Domoinio de comunicaion', 'Control Emocional', 'Precision en conflictos', 'Habla y Presencia', 'Ejecucion de Procesos', 'Impacto de liderazgo', 'Operacion estrategica'];
  const minValue = Math.min(...values);
  const minIndexes = values.map((v, i) => v === minValue ? i : -1).filter(i => i !== -1);
  const lowLabels = minIndexes.map(i => labels[i]).join(', ');
  const percent = Math.round((minValue / 10) * 100);
  document.getElementById('top-skill-name').textContent = lowLabels;
  document.getElementById('top-skill-percent').textContent = `${percent}%`;
  const label = document.querySelector('#highest-score-summary div');
  if (label) {
    label.innerHTML = `Mejoremos en: <span id="top-skill-name">${lowLabels}</span> (<span id="top-skill-percent">${percent}%</span>)`;
  }
  if (minIndexes.length > 0) {
    showLowestSkillCard(minIndexes[0]);
  }
}

function showLowestSkillCard(index) {
  const cardData = [
    {
      title: 'Domoinio de comunicaion',
      bullets: [
        'Si realmente están influyendo',
        'Si se adaptan a diferentes personalidades',
        'Cuánto poder lleva realmente su comunicación'
      ],
      url: 'https://www.adrianagallardo.com/pages/communication-mastery'
    },
    {
      title: 'Control Emocional',
      bullets: [
        'Su patrón emocional habitual',
        'Cómo lideran bajo presión',
        'Dónde el escape emocional les cuesta poder'
      ],
      url: 'https://www.adrianagallardo.com/pages/emotional-control-1'
    },
    {
      title: 'Precision en conflictos',
      bullets: [
        'Patrones de evitación',
        'Hesitación en el liderazgo',
        'Cómo manejan la tensión y la verdad'
      ],
      url: 'https://www.adrianagallardo.com/pages/conflict-resolution'
    },
    {
      title: 'Habla y Presencia',
      bullets: [
        'Su presencia y autoridad reales',
        'Si dominan la habitación o desaparecen',
        'Impacto en situaciones grupales o conversaciones de alto nivel'
      ],
      url: 'https://www.adrianagallardo.com/pages/public-speaking'
    },
    {
      title: 'Ejecucion de Procesos',
      bullets: [
        'Ineficiencias Operativas',
        'Falta de estructura o documentación',
        'Cuellos de botella que están tolerando'
      ],
      url: 'https://www.adrianagallardo.com/pages/creation-execution'
    },
    {
      title: 'Impacto de liderazgo',
      bullets: [
        'Influencia verdadera',
        'Cultura a través de la presencia',
        'Liderazgo más allá de la gestión de tareas'
      ],
      url: 'https://www.adrianagallardo.com/pages/leadership'
    },
    {
      title: 'Operacion estrategica',
      bullets: [
        'Falta de toma de decisiones estratégicas',
        'Resolver síntomas en lugar de resolver sistemas',
        'Cómo priorizan y lideran con una visión global'
      ],
      url: 'https://www.adrianagallardo.com/pages/strategic-thinking'
    }
  ];

  const card = cardData[index];
  const container = document.getElementById('lowest-skill-card');
  const titleEl = document.getElementById('lowest-skill-title');
  const bulletsEl = document.getElementById('lowest-skill-bullets');
  if (!container || !titleEl || !bulletsEl || !card) return;
  titleEl.textContent = card.title;
  bulletsEl.innerHTML = `
    ${card.bullets.map(b => `<li>${b}</li>`).join('')}
    <li style="margin-top: 12px; list-style: none;">
      <a href="${card.url}" target="_blank" style="display: inline-block; background: #007bff; color: #fff; padding: 10px 20px; border-radius: 8px; text-decoration: none; font-weight: 600;">
        Aprende mas →
      </a>
    </li>
  `;
  container.style.display = 'block';
  container.classList.remove('bounce');
  void container.offsetWidth;
  container.classList.add('bounce');
}

window.addEventListener('DOMContentLoaded', () => {
  if (!polygon || !ticksGroup || radialInputs.some(i => !i) || customThumbs.some(t => !t)) {
    console.error('CRITICAL ERROR: Missing required DOM elements—check your IDs.');
    return;
  }
  drawTicks();
  radialInputs.forEach((inp, idx) => {
    customThumbs[idx].textContent = inp.value;
    positionSliderAndThumb(idx);
  });
  updatePolygon();
  updateHighestScoreSummary();
  radialInputs.forEach(inp => inp?.addEventListener('input', () => onSliderInput(inp)));
  linearInputs.forEach(inp => inp?.addEventListener('input', () => syncFromLinear(inp)));
});
